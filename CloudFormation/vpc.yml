AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE6225 Network and DB Infrastructure
Parameters:
  VpcCIDR:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  Subnet1CIDR:
    Description: "CIDR block for Subnet 1"
    Type: String
    Default: "10.0.0.0/24"
  Subnet2CIDR:
    Description: "CIDR block for Subnet 2"
    Type: String
    Default: "10.0.1.0/24"
  Subnet3CIDR:
    Description: "CIDR block for Subnet 3"
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubnet1CIDR:
    Description: "CIDR block for private Subnet 1"
    Type: String
    Default: "10.0.6.0/24"
  PrivateSubnet2CIDR:
    Description: "CIDR block for private Subnet 2"
    Type: String
    Default: "10.0.7.0/24"
  PrivateSubnet3CIDR:
    Description: "CIDR block for private Subnet 3"
    Type: String
    Default: "10.0.8.0/24"
  AMI:
    Description: "AMI ID"
    Type: String
    Default: ami-086941de4500e0784
  S3BucketName:
    Description: "Private S3 bucket name"
    Type: String
    Default: dev.jenny-hung.me
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref Subnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref Subnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref Subnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [3, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [4, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [5, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LoadBalancerSecurityGroup
    Properties:
      GroupName: application
      GroupDescription: Security group for webservice application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: !Ref VPC
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: EC2SecurityGroup
    Properties:
      GroupName: database
      GroupDescription: Security group for MySQL database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          Description: "Allow connections to a MySql DB instance"
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: !Ref VPC
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: load balancer
      GroupDescription: Security group for the load balancer to access the webservice EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 433
          ToPort: 433
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: !Ref VPC
  S3PrivateBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      BucketName:
        !Join [
          ".",
          [!Select [2, !Split ["/", !Ref AWS::StackId]], !Ref S3BucketName],
        ]
      LifecycleConfiguration:
        Rules:
          - Id: StandardIARule
            Prefix: standard_ia
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  RDSParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameter group for MySQL database
      Family: mysql8.0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  RDSSubnetsGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:
        !Join ["", ["RDS Subnet Group for", !Ref AWS::StackName]]
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSSubnetsGroup
      - RDSSecurityGroup
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: mysql
      MultiAZ: false
      DBInstanceIdentifier: csye6225
      MasterUsername: csye6225
      MasterUserPassword: "*passwordcsye6225"
      DBSubnetGroupName: !Ref RDSSubnetsGroup
      PubliclyAccessible: false
      DBName: CSYE6225
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBParameterGroupName: !Ref RDSParamGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  IAMPolicyForS3:
    Type: AWS::IAM::Policy
    DependsOn: IAMRoleForS3
    Properties:
      PolicyName: csye6225-s3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: ["s3:*"]
            Effect: Allow
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref S3PrivateBucket]]
              - !Join ["", ["arn:aws:s3:::", !Ref S3PrivateBucket, "/*"]]
      Roles: [!Ref IAMRoleForS3]
  IAMRoleForS3:
    Type: AWS::IAM::Role
    Description: IAM role for accessing private s3 bucket
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: EC2-CSYE6225
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ec2-instance-profile
      Path: /
      Roles:
        - !Ref IAMRoleForS3
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: IAMInstanceProfile
    Properties:
      LaunchConfigurationName: asg_launch_config
      AssociatePublicIpAddress: true
      ImageId: !Ref AMI
      InstanceType: t2.micro
      KeyName: aws-dev-ec2
      IamInstanceProfile: !Ref IAMInstanceProfile
      SecurityGroups: [!Ref EC2SecurityGroup]
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            cd /etc/systemd/system/
            sudo touch app.conf
            sudo echo 'S3_BUCKET_NAME=${S3PrivateBucket}' >> ./app.conf
            sudo echo 'DB_USERNAME=csye6225' >> ./app.conf
            sudo echo 'DB_PASSWORD=*passwordcsye6225' >> ./app.conf
            sudo echo 'DB_ENDPOINT=${DBEndpoint}'  >> ./app.conf
            sudo systemctl daemon-reload
            sudo systemctl start app
          - DBEndpoint: !GetAtt RDSInstance.Endpoint.Address
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: "gp2"
            DeleteOnTermination: true
  WebserviceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - LaunchConfiguration
      - InternetGatewayAttachment
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: "300"
      DesiredCapacity: "3"
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: "5"
      MinSize: "1"
      NewInstancesProtectedFromScaleIn: true
      Tags:
        - Key: Application
          Value: Webservice
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebserviceAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      ScalingAdjustment: 1
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebserviceAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 5%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 10
      EvaluationPeriods: 1
      Threshold: 5
      AlarmActions:
        - !Ref ScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: WebserviceAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU < 3%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 10
      EvaluationPeriods: 1
      Threshold: 3
      AlarmActions:
        - !Ref ScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: WebserviceAutoScalingGroup
      ComparisonOperator: LessThanThreshold
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: Webwervice
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: "/healthz"
      HealthCheckPort: "8080"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: "HTTP"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  DNSforLoadBalancer:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: dev.jenny-hung.me.
      Comment: Zone apex alias targeted to LoadBalancer
      RecordSets:
        - Name: dev.jenny-hung.me.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt "LoadBalancer.CanonicalHostedZoneID"
            DNSName: !GetAtt "LoadBalancer.DNSName"
Outputs:
  VpcId:
    Description: "The VPC ID"
    Value: !Ref VPC
  PublicSubnet1Id:
    Description: "Subnet 1 ID"
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: "Subnet 2 ID"
    Value: !Ref PublicSubnet2
  PublicSubnet3Id:
    Description: "Subnet 3 ID"
    Value: !Ref PublicSubnet3
  EC2SecurityGroupId:
    Description: "EC2 Security Group ID for EC2 Instance"
    Value: !Ref EC2SecurityGroup
  RDSSecurityGroupId:
    Description: "EC2 Security Group ID for RDS Instance"
    Value: !Ref RDSSecurityGroup
  LoadBalancerSecurityGroupGroupId:
    Description: "EC2 Security Group ID for Load Balancer"
    Value: !Ref LoadBalancerSecurityGroup
  PrivateSubnet1Id:
    Description: "Private Subnet 1 ID"
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: "Private Subnet 2 ID"
    Value: !Ref PrivateSubnet2
  PrivateSubnet3Id:
    Description: "Private Subnet 3 ID"
    Value: !Ref PrivateSubnet3
  S3PrivateBucket:
    Description: "S3 Private Bucket for Storing Users' Profile Pictures"
    Value: !Ref S3PrivateBucket
  RDSInstanceEndpoint:
    Description: "Endpoint of MySQL RDS Instance"
    Value: !GetAtt RDSInstance.Endpoint.Address
